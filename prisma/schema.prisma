// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int               @id @default(autoincrement())
  firstName         String
  lastName          String
  email             String            @unique
  password          String
  phone             String            @unique
  role              Role              @default(CUSTOMER)
  status            UserStatus        @default(ACTIVE)
  cart              Cart?
  order             Order[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model Book {
  id                Int               @id @default(autoincrement())
  title             String            
  price             Int
  stock             Int
  genre             BookGenre
  status            BookStatus        @default(ACTIVE)
  orderBook         OrderBook[]
  writerBook        WriterBook[]
  cartBook          CartBook[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model Cart {
  userId            Int               @id @default(autoincrement())
  user              User              @relation(fields: [userId], references: [id])
  books             CartBook[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model CartBook {
  cartId    Int
  bookId    Int
  book      Book   @relation(fields: [bookId], references: [id])
  cart      Cart   @relation(fields: [cartId], references: [userId])
  quantity  Int    @default(1) 
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  @@id([cartId, bookId])
}

model Writer {
  id                Int               @id @default(autoincrement())
  name              String
  bio               String?
  writerBook        WriterBook[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model Order {
  id                Int               @id @default(autoincrement())
  userId            Int
  user              User              @relation(fields: [userId], references: [id])
  orderDate         DateTime          @default(now())
  status            OrderStatus       @default(PENDING)
  totalPrice        Int
  orderBook         OrderBook[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model WriterBook {
  writerId          Int
  writer            Writer            @relation(fields: [writerId], references: [id])
  bookId            Int
  book              Book              @relation(fields: [bookId], references: [id])
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  @@id([writerId, bookId])
}

model OrderBook {
  orderId           Int
  order             Order             @relation(fields: [orderId], references: [id])
  bookId            Int
  book              Book              @relation(fields: [bookId], references: [id])
  quantity          Int
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  @@id([orderId, bookId])
}

enum Role {
  CUSTOMER
  ADMIN
}

enum BookGenre {
  FICTION
  NON_FICTION
  MYSTERY
  SCI_FI
  FANTASY
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum BookStatus {
  ACTIVE
  INACTIVE
}

enum UserStatus {
  ACTIVE
  INACTIVE
}